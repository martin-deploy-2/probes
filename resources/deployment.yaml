apiVersion: apps/v1
kind: Deployment
metadata:
  name: martin-probes
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: 0134c65e-426b-4ca1-a2a7-190778bdbda9
  template:
    metadata:
      labels:
        app.kubernetes.io/name: 0134c65e-426b-4ca1-a2a7-190778bdbda9
    spec:
      serviceAccountName: martin-probes
      containers:
        - name: main
          image: ghcr.io/martin-deploy-2/probes:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 5m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 256Mi

          startupProbe: # The startup probes blocks the other probes while the application cold-boots.
            initialDelaySeconds: 2 # I think my application will take less than 2s to startup and load all its configuration.
            timeoutSeconds: 5 # I think my application, when started, will respond to the probe request in less than 5s.
            httpGet:
              scheme: HTTP
              port: 80
              path: /api/v1/health/startup

          livenessProbe: # The liveness probe indicates whether the application itself is healthy and has correct configuration.
            periodSeconds: 10 # Check for my application's health every 10s.
            timeoutSeconds: 5 # I think my application will respond to the probe request in less than 5s.
            httpGet:
              scheme: HTTP
              port: 80
              path: /api/v1/health/liveness

          readinessProbe: # The readiness probe indicates whether the application AND its dependencies are healthy and ready to serve requests.
            periodSeconds: 10 # Check for my application's health every 10s.
            timeoutSeconds: 5 # I think my application will respond to the probe request in less than 5s.
            failureThreshold: 10 # Allow for some failures before marking my application as failed, it could come from one if its dependencies.
            httpGet:
              scheme: HTTP
              port: 80
              path: /api/v1/health/readiness

          # When the liveness probe fails, the pod IS restarted by K8S, which
          # apparently expects different outcomes from the same cause...
          # However, when the readiness probe fails, the pod is NOT restarted
          # by K8S: it's the dependency's fault. This makes the LIVENESS probe
          # a better place to fail fast if, for instance, a DB user password is
          # faulty, and the READINESS probe a better place to fail fast if the
          # same DB is inaccessible over the network.

      imagePullSecrets:
        - name: martin-deploy-2-ghcr
